#include "stm32f30x_conf.h" // STM32 config
#include "30010_io.h" // Input/output library for this course
#include "ansi.h"
#include "LUT.h"
#include "control.h"
#include "timer.h"
#include "charset.h"
#include "display.h"
#include "position.h"
#include "graphics.h"

volatile timer globaltimer;
volatile int8_t interruptflag;

int16_t count = 0;


void initclock(){
	globaltimer.centiseconds=0;
	globaltimer.seconds=0;
	globaltimer.minutes=0;
	globaltimer.hours=0;
}

void tickClock() {
	// this section translates the clock ticker to timer values
	globaltimer.centiseconds++;
	if (globaltimer.centiseconds >= 100){
		globaltimer.centiseconds = 0; //reset the centiseconds
		globaltimer.seconds++; //convert the 100 centiseconds to seconds
	}
	if (globaltimer.seconds >= 60){
		globaltimer.seconds = 0; //reset the seconds
		globaltimer.minutes++; //convert the 60 seconds to minutes
	}
	if (globaltimer.minutes >= 60){
		globaltimer.minutes = 0; //reset the minutes
		globaltimer.hours++; //convert the 60 minutes to hours
	}
	if (globaltimer.hours >= 60){
		globaltimer.hours = 0; //if hours exceeds 60, it is reset
	}
}

void TIM2_IRQHandler() {
 //Do whatever you want here, but make sure it doesnâ€™t take too much
	tickClock();
	interruptflag = 1;
	TIM2->SR &= ~0x0001; // Clear interrupt bit
}

int main(void)
{

	uart_init( 9600 ); // Initialize USB serial emulation at 9600 baud

	lcd_init();
	lcd_reset();
	uint8_t graphbuffer[512];

	memset(graphbuffer,0x00,512); // Sets each element of the buffer to 0x00

	/*int8_t k;
	int8_t *counter=0;
	struct ball b1 = {4,4,2,1};
	clrscr();
	wall(1,1,40,20,0);
	for (k = 0; k < 150; k++) {
		deleteBall(1,1,40,20,&b1);
		positionBall(&b1);
		printBall(1,1,40,20,&b1);
		bounce(1,1,40,20,&b1, &counter);
		hit(1,1,40,20, &counter);
	}*/
	struct window w = {1,1,100,45};
	struct spaceship s = {20,40};
	struct bullet b1 = {0,0,0,0};
	struct enemy e1 = {0,0,0,0};

	//int8_t countpresses = 0;
	clrscr();
	printf("%c[?25l", ESC); //removes cursor in putty
	gotoxy(1,1);
	wall(&w,0);
	timer2();
	initclock();

	initButton();
	init2Axis();
	calibrate();

	char str[30];
	char str2[30];

	while(1){
		int16_t x1 = set2Axis(1);
		int16_t x2 = set2Axis(2);

		sprintf(str, "Pot 1 = %04d", x1);
		sprintf(str2, "Pot 2 = %04d", x2);
		lcd_write_string(graphbuffer, str, 0, 0);
		lcd_write_string(graphbuffer, str2, 0, 1);
		lcd_push_buffer(graphbuffer);

		deleteSpaceship(&s);
		positionSpaceship(&w, &s, 0);
		printSpaceship(&s);

		//shootBullet(&w, &b1, &s);


		if (setButton() == 10 || readJoystick() == 16){
			deleteBullet(&w,&b1);
			b1.x = s.x;
			b1.y = s.y-1;
			b1.vy = -4;
			printBullet(&w,&b1);
		}
		deleteBullet(&w,&b1);
		positionBullet(&w,&b1);
		printBullet(&w,&b1);

		if (setButton() == 11){
			deleteEnemy(&w,&e1);
			e1.x = 5;
			e1.y = 1;
			e1.vy = 1;
			printEnemy(&w,&e1);
		}
		deleteEnemy(&w,&e1);
		positionEnemy(&w,&e1);
		printEnemy(&w,&e1);
		explode(&e1, &b1);



		/*int8_t buttonDown = setButton();

		printf("%d", buttonDown);*/

		/*gotoxy(1,1);
				printf("Pot 1 = %04d\nPot 2 = %04d", x1, x2);*/


		/*lcd_update(graphbuffer, interruptflag);

		if (count < 200){
			count++;
		} else if (count == 200){
			lcd_scroll(graphbuffer);
			count=0;
		}*/



		/*
		int8_t joy = readJoystick();
		joyLed();

		if (globaltimer.centiseconds % 100 == 0) {
			gotoxy(1,1);
			printf("Time since start: %02d:%02d:%02d:%02d \n", globaltimer.hours, globaltimer.minutes, globaltimer.seconds, globaltimer.centiseconds);
		}
		if (joy==16){ //When joystick is center, stop/start
			countpresses++;

			if (countpresses % 2) {
				clockstart(); // start clock on odd numbers of countpresses
			}
			else {
				clockstop(); // stop clock on even numbers of countpresses
			}
		}
		else if (joy==4){ //When joystick is right, split time 1
			gotoxy(1,2);
			printf("Split time 1:     %02d:%02d:%02d:%02d \n", globaltimer.hours, globaltimer.minutes, globaltimer.seconds, globaltimer.centiseconds);
		}
		else if (joy==8){ //When joystick is right, split time 2
			gotoxy(1,3);
			printf("Split time 2:     %02d:%02d:%02d:%02d \n", globaltimer.hours, globaltimer.minutes, globaltimer.seconds, globaltimer.centiseconds);
		}
		else if (joy==2){
			clockstop();
			initclock(); //When joystick is down, reset
			}
		*/

	}








 }
